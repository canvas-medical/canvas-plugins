name: "Install Python and Poetry"
description: "Installs Python using .python-version file's version, and Poetry with the given version"

inputs:
  POETRY_VERSION:
    description: "Poetry version to install"
    required: false
    default: "1.8.3"
  PYTHON_VERSION:
    description: "Version range or exact version of Python or PyPy to use, using SemVer's version range syntax. Reads from .python-version if unset."
    required: false
    default: ""
  CHECK_LATEST:
    description: "If check-latest is set to true, the action first checks if the cached version is the latest one"
    required: false
    default: false
runs:
  using: "composite"
  steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{inputs.PYTHON_VERSION}}
        python-version-file: ".python-version"
        check-latest: ${{inputs.CHECK_LATEST}}

      # Cache the installation of Poetry itself.
      # This prevents the workflow from installing Poetry every time, which can be slow.
    - name: Cache poetry install
      id: cache-poetry
      uses: actions/cache@v4
      with:
        path: ~/.local
        key: poetry-${{inputs.POETRY_VERSION}}

    # Install Poetry, make sure the .venv is in the project, so it's easily cached.
    - name: Install poetry
      if: steps.cache-poetry.outputs.cache-hit != 'true'
      uses: snok/install-poetry@v1
      with:
        version: ${{ inputs.POETRY_VERSION }}

    # Create virtualenv inside the projectâ€™s root directory.
    - name: Poetry Config
      shell: bash
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true
