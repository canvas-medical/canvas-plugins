# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import canvas_generated.data_access_layer.data_access_layer_pb2 as data__access__layer__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in data_access_layer_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class DataAccessLayerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetPatient = channel.unary_unary(
                '/DataAccessLayer/GetPatient',
                request_serializer=data__access__layer__pb2.ID.SerializeToString,
                response_deserializer=data__access__layer__pb2.Patient.FromString,
                #_registered_method=True)
        )
        self.GetTask = channel.unary_unary(
                '/DataAccessLayer/GetTask',
                request_serializer=data__access__layer__pb2.ID.SerializeToString,
                response_deserializer=data__access__layer__pb2.Task.FromString,
                #_registered_method=True)
        )
        self.GetTaskLabels = channel.unary_unary(
                '/DataAccessLayer/GetTaskLabels',
                request_serializer=data__access__layer__pb2.ID.SerializeToString,
                response_deserializer=data__access__layer__pb2.TaskLabels.FromString,
                #_registered_method=True)
        )
        self.GetTaskComments = channel.unary_unary(
                '/DataAccessLayer/GetTaskComments',
                request_serializer=data__access__layer__pb2.ID.SerializeToString,
                response_deserializer=data__access__layer__pb2.TaskComments.FromString,
                #_registered_method=True)
        )
        self.GetPatientTasks = channel.unary_unary(
                '/DataAccessLayer/GetPatientTasks',
                request_serializer=data__access__layer__pb2.ID.SerializeToString,
                response_deserializer=data__access__layer__pb2.PatientTasks.FromString,
                #_registered_method=True)
        )
        self.GetStaffAssignedTasks = channel.unary_unary(
                '/DataAccessLayer/GetStaffAssignedTasks',
                request_serializer=data__access__layer__pb2.ID.SerializeToString,
                response_deserializer=data__access__layer__pb2.StaffAssignedTasks.FromString,
                #_registered_method=True)
        )


class DataAccessLayerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetPatient(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaskLabels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaskComments(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPatientTasks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStaffAssignedTasks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataAccessLayerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetPatient': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPatient,
                    request_deserializer=data__access__layer__pb2.ID.FromString,
                    response_serializer=data__access__layer__pb2.Patient.SerializeToString,
            ),
            'GetTask': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTask,
                    request_deserializer=data__access__layer__pb2.ID.FromString,
                    response_serializer=data__access__layer__pb2.Task.SerializeToString,
            ),
            'GetTaskLabels': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTaskLabels,
                    request_deserializer=data__access__layer__pb2.ID.FromString,
                    response_serializer=data__access__layer__pb2.TaskLabels.SerializeToString,
            ),
            'GetTaskComments': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTaskComments,
                    request_deserializer=data__access__layer__pb2.ID.FromString,
                    response_serializer=data__access__layer__pb2.TaskComments.SerializeToString,
            ),
            'GetPatientTasks': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPatientTasks,
                    request_deserializer=data__access__layer__pb2.ID.FromString,
                    response_serializer=data__access__layer__pb2.PatientTasks.SerializeToString,
            ),
            'GetStaffAssignedTasks': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStaffAssignedTasks,
                    request_deserializer=data__access__layer__pb2.ID.FromString,
                    response_serializer=data__access__layer__pb2.StaffAssignedTasks.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'DataAccessLayer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('DataAccessLayer', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DataAccessLayer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetPatient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DataAccessLayer/GetPatient',
            data__access__layer__pb2.ID.SerializeToString,
            data__access__layer__pb2.Patient.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DataAccessLayer/GetTask',
            data__access__layer__pb2.ID.SerializeToString,
            data__access__layer__pb2.Task.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTaskLabels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DataAccessLayer/GetTaskLabels',
            data__access__layer__pb2.ID.SerializeToString,
            data__access__layer__pb2.TaskLabels.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTaskComments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DataAccessLayer/GetTaskComments',
            data__access__layer__pb2.ID.SerializeToString,
            data__access__layer__pb2.TaskComments.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPatientTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DataAccessLayer/GetPatientTasks',
            data__access__layer__pb2.ID.SerializeToString,
            data__access__layer__pb2.PatientTasks.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStaffAssignedTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DataAccessLayer/GetStaffAssignedTasks',
            data__access__layer__pb2.ID.SerializeToString,
            data__access__layer__pb2.StaffAssignedTasks.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
