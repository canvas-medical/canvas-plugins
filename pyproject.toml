[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core"]

[tool.black]
line-length = 100

[tool.django-stubs]
django_settings_module = "settings"

[tool.isort]
profile = "black"

[tool.mypy]
check_untyped_defs = true
color_output = true
disallow_incomplete_defs = true
disallow_untyped_calls = true
disallow_untyped_decorators = false
disallow_untyped_defs = true
error_summary = true
exclude = [
  "canvas_generated/"
]
follow_imports = "normal"
follow_imports_for_stubs = true
ignore_missing_imports = true
no_implicit_optional = true
plugins = ["mypy_django_plugin.main", "pydantic.mypy"]
pretty = true
show_error_context = true
strict_equality = true
strict_optional = true
untyped_calls_exclude = ["canvas_generated", "redis"] # https://github.com/python/typeshed/issues/10592
warn_no_return = true
warn_redundant_casts = true
warn_return_any = false
warn_unreachable = true
warn_unused_ignores = true

[tool.poetry]
authors = ["Canvas Team <engineering@canvasmedical.com>"]
description = "SDK to customize event-driven actions in your Canvas instance"
license = "MIT"
name = "canvas"
packages = [
  {include = "canvas_cli"},
  {include = "canvas_generated"},
  {include = "canvas_sdk"},
  {include = "logger"},
  {include = "plugin_runner"},
  {include = "pubsub"},
  {include = "settings.py"}
]
readme = "README.md"
version = "0.7.0"

[tool.poetry.dependencies]
cookiecutter = "*"
cron-converter = "^1.2.1"
django = "^5.1.1"
django-stubs = {extras = ["compatible-mypy"], version = "^5.1.1"}
django-timezone-utils = "^0.15.0"
env-tools = "^2.3.0"
grpcio = "^1.60.1"
ipython = "^8.21.0"
jsonschema = "^4.21.1"
keyring = "*"
protobuf = "^4.25.3"
psycopg = {extras = ["binary"], version = "^3.2.2"}
pydantic = "^2.6.1"
pyjwt = "2.10.0"
python = ">=3.11,<3.13"
python-dotenv = "^1.0.1"
rapidfuzz = "^3.10.1"
redis = "^5.0.4"
requests = "*"
restrictedpython = "^7.1"
statsd = "^4.0.1"
typer = {extras = ["all"], version = "*"}
typing-extensions = ">=4.8,<4.13"
websocket-client = "^1.7.0"

[tool.poetry.group.dev.dependencies]
black = "^24.8.0"
grpcio-tools = "^1.60.1"
mypy = "*"
pre-commit = "*"
pytest = "*"
pytest-asyncio = "^0.24.0"
pytest-mock = "*"
python-semantic-release = "*"
requests-mock = "*"
types-protobuf = "*"
types-requests = "*"

[tool.poetry.scripts]
canvas = "canvas_cli.main:app"

[[tool.poetry.source]]
name = "PyPI"
priority = "primary"

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true

[tool.pydocstyle]
add_ignore = "D100,D104,D105,D106,D107,D200,D203,D205,D212,D400"
convention = "google"

[tool.pytest.ini_options]
addopts = "--durations=10"
asyncio_default_fixture_loop_scope = "session"
filterwarnings = [
  'ignore:No directory at.*static.*:UserWarning:whitenoise.base',
  'ignore:SelectableGroups dict interface is deprecated. .*:DeprecationWarning'
]
markers = [
  'integtest: mark a test as being an integration test with external dependencies'
]
norecursedirs = [
  ".git",
  ".mypy_cache",
  ".pytest_cache",
  "__pycache__",
  "custom-plugins",
  "node_modules",
  "static",
  "static-files"
]
python_files = ["*_tests.py", "test_*.py", "tests.py"]

[tool.semantic_release]
build_command = "poetry build"
commit_message = "chore: v{version}\n\nSee the changelog for changes."
commit_version_number = true
match = "main"
tag_format = "{version}"
version_source = "tag"
version_toml = [
  "pyproject.toml:tool.poetry.version"
]
